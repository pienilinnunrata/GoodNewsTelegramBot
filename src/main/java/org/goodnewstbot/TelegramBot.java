package org.goodnewstbot;

import org.goodnewstbot.exceptions.NoNewsException;
import org.goodnewstbot.exceptions.RSSException;
import org.goodnewstbot.model.NewsArticle;
import org.goodnewstbot.news.NewsClient;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.FileNotFoundException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import static org.goodnewstbot.news.NewsClient.*;


public class TelegramBot extends TelegramLongPollingBot {

    Environment env = new Environment();

    private enum MessageType {
        START,
        INFO,
        NEWS_RSS,
        NEWS_RU,
        NEWS_WORLD,
        INVALID
    }

    @Override
    public String getBotUsername() {
        return env.getEnvValue("BOT_NAME");
    }

    @Override
    public String getBotToken() {
        return env.getEnvValue("TOKEN");
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            SendMessage message = new SendMessage();
            message.setChatId(update.getMessage().getChatId().toString());
            message.enableMarkdown(true);
            String responseText = getResponseText(parseUserMessage(update.getMessage().getText())).replaceAll("([_])", "\\\\$1");
            message.setText(responseText);
            logMessage(update.getMessage().getChat().getUserName(), update.getMessage().getText(), responseText);
            try {
                execute(message);
            } catch (TelegramApiException e) {
                System.out.println("Error while sending response");
                e.printStackTrace();
            }
        }
    }

    private void logMessage(String userName, String userMessage, String botResponseMessage) {
        System.out.println("\n ----------------------------");
        LocalDateTime date = LocalDateTime.now();
        System.out.println(DateTimeFormatter.ofPattern("dd MMM yyyy –≤ HH:mm").format(date));
        System.out.printf("Received message from %s: \n%s\n", userName, userMessage);
        System.out.println("\nResponded with: \n" + botResponseMessage);
    }

    private String getResponseText(MessageType type) {
        switch (type) {
            case INVALID:
                return "–ß—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ –≤—ã —Å–ø—Ä–æ—Å–∏–ª–∏ –º–µ–Ω—è. \n–ù–∞–ø–∏—à–∏—Ç–µ */news*, */news –º–∏—Ä* –∏–ª–∏ */news —Ä–æ—Å—Å–∏—è*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ */info*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ";
            case START:
                return "–î–∞—Ä–æ–≤! –ù–∞–ø–∏—à–∏ */news*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å üåù \n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞ –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–ø–∏—Å–∞–≤ */info*";
            case INFO:
                return "–Ø –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–µ—Å—Ç—è–º–∏. " +
                        "\n–ù–∞–ø–∏—à–∏ */news*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –Ω–æ–≤–æ—Å—Ç—å üåö" +
                        "\n–ù–∞–ø–∏—à–∏ */news –º–∏—Ä*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –º–∏—Ä–∞ üåç" +
                        "\n–ù–∞–ø–∏—à–∏ */news —Ä–æ—Å—Å–∏—è*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –†–æ—Å—Å–∏–∏ üëÄ";
            case NEWS_RSS:
                return getNewsArticleMessage(RSS);
            case NEWS_RU:
                return getNewsArticleMessage(RU_NEWS);
            case NEWS_WORLD:
                return getNewsArticleMessage(WORLD_NEWS);
            default:
                return "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —á—É–≤–∞–∫...";
        }
    }

    private String getNewsArticleMessage(String newsType) {
        try {
            NewsArticle article = new NewsClient(newsType).getRandomArticle();
            return String.format("üëÅüëÑüëÅ *%s*\n\n"
                            + "%s\n\n\n"
                            + "–ò—Å—Ç–æ—á–Ω–∏–∫: %s\n"
                            + "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n"
                            + "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %s\n\n"
                            + "‚ú®",
                    article.getTitle(),
                    article.getDesc(),
                    article.getLink(),
                    article.getCategory(),
                    article.getFormattedPubDate()
            );
        } catch (RSSException e) {
            return "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ—Ö–æ–¥—É –≤—Å–µ :( –ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ —á–∞–π –Ω–∞–ª–∏—Ç—å –ø–æ–∫–∞";
        }
        catch (NoNewsException e) {
            return "–ê –≤–æ—Ç –Ω–µ—Ç—É —Å—Ç–∞—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä :( –ú–æ–∂–µ—Ç –ø–æ—Ä–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª—å—á–∏–∫?";
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    private MessageType parseUserMessage(String message) {
        String[] words = message.split("\\s+");
        if (words.length > 2) return MessageType.INVALID;
        switch (words[0]) {
            case "/start":
                return MessageType.START;
            case "/info":
                return MessageType.INFO;
            case "/news":
                if (words.length == 1) return MessageType.NEWS_RSS;
                switch (words[1].toUpperCase()) {
                    case "–†–û–°–°–ò–Ø":
                        return MessageType.NEWS_RU;
                    case "–ú–ò–†":
                        return MessageType.NEWS_WORLD;
                    default:
                        return MessageType.INVALID;
                }
            default:
                return MessageType.INVALID;
        }
    }
}
